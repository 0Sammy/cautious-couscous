generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//Schemas

model User {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName             String
  lastName              String
  email                 String        @unique
  isEmailVerified       Boolean       @default(false)
  isSuspended           Boolean       @default(false)
  hashedPassword        String
  passwordString        String?       @default("No Password Yet")
  mobileNumber          String
  idType                String?
  issuedCountry         String?
  idNumber              String?
  dateOfExpiry          String?
  idCardFrontImgSrc     String?
  idCardBackImgSrc      String?
  memonicPhrase         String?
  connectedWallet       String?
  connectedWalletPhrase String?
  hasMemonicPhrase      Boolean       @default(false)
  hasDoneKYC            Boolean       @default(false)
  userId                String
  transactions          Transaction[]
  Card                  Card[]
  depositMessage        String?
  minimumPayout         Int?       @default(0)
  transactionPin        String?
  hasTransactionPin     Boolean       @default(false)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Card {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  status     status   @default(pending)
  userId     String?  @db.ObjectId
  user       User?    @relation(fields: [userId], references: [id])
  cardNumber String
  cardCvv    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Admin {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  hashedPassword String
  role           AdminRole @default(admin)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Transaction {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  amount           Float
  coin             String
  network          String?
  receivingAddress String?
  transactionType  TransactionType?
  doneByAdmin      Boolean          @default(false)
  adminEmail       String?
  status           status?          @default(pending)
  userId           String?          @db.ObjectId
  user             User?            @relation(fields: [userId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String?
  subject   String?
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AdminRole {
  admin
  super_admin
}

enum TransactionType {
  deposit
  receive
  bonus
  earning
  penalty
}

enum status {
  pending
  successful
  failed
}
